import tkinter as tk
from random import shuffle
from tkinter.messagebox import showinfo, showerror

colors = {
    1: '#2c5d96', # —Å–∏–Ω–∏–π
    2: '#31ad23', # –∑–µ–ª–µ–Ω—ã–π
    3: '#c91c2e', # –∫—Ä–∞—Å–Ω—ã–π
    4: '#28119c', # —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π
    5: '#6b0a4e', # —Ç–µ–º–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
    6: '#299693', # –±–∏—Ä—é–∑–æ–≤—ã–π
    7: '#521f91', # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    8: '#38121a'  # –±–æ—Ä–¥–æ–≤—ã–π
}

class MyButton(tk.Button):
    # –ö–ª–∞—Å—Å MyButton –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –≤ –∏–≥—Ä–µ.

    def __init__(self, master, x, y, number=0, *args, **kwargs):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏.
        super(MyButton, self).__init__(master, width=3, font='Calibri 20 bold', *args, **kwargs)
        self.x = x
        self.y = y
        self.number = number
        self.is_mine = False
        self.cnt_bomb = 0
        self.config(background='#f0d1ef')
        self.is_open = False

    def __repr__(self):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏.
        return f'MyButton {self.x} {self.y} {self.number} {self.is_mine}'


class MineSweeper:
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã "–°–∞–ø–µ—Ä".

    window = tk.Tk()
    row = 7
    columns = 10
    mines = 10
    is_game_over = False
    is_first_click = True
    window.title('MineSweeper')
    window.iconbitmap('C:/Users/Anastasia/PycharmProjects/pythonProject/images/icon1.ico')

    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã.
        self.buttons = []

        for i in range(MineSweeper.row + 2):
            temp = []
            for j in range(MineSweeper.columns + 2):
                btn = MyButton(MineSweeper.window, x=i, y=j, )
                btn.config(command=lambda button=btn: self.click(button))
                btn.bind('<Button-3>', self.right_click)  # –ø—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ (–≤—ã–±–æ—Ä –±–æ–º–±—ã)
                temp.append(btn)

            self.buttons.append(temp)

            self.flags = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ñ–ª–∞–∂–∫–æ–≤

            # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –º–∏–Ω –∏ —Ñ–ª–∞–∂–∫–æ–≤
            self.bottom_frame = tk.Frame(self.window)
            self.bottom_frame.grid(row=MineSweeper.row + 2, columnspan=MineSweeper.columns + 2)

            # –ú–µ—Ç–∫–∞ "–ú–∏–Ω—ã"
            self.mines_label = tk.Label(self.bottom_frame, text="–ú–∏–Ω—ã:")
            self.mines_label.grid(row=0, column=0)

            # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
            self.mines_count_label = tk.Label(self.bottom_frame, text=MineSweeper.mines)
            self.mines_count_label.grid(row=0, column=1)

            # –ú–µ—Ç–∫–∞ "–§–ª–∞–∂–∫–∏"
            self.flags_label = tk.Label(self.bottom_frame, text="–§–ª–∞–∂–∫–∏:")
            self.flags_label.grid(row=0, column=2)

            # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–ª–∞–∂–∫–æ–≤
            self.flags_count_label = tk.Label(self.bottom_frame, text="0")
            self.flags_count_label.grid(row=0, column=3)

    def right_click(self, event):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –º—ã—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.
        if MineSweeper.is_game_over:
            return
        cur_btn = event.widget
        if cur_btn['state'] == 'normal':
            cur_btn['state'] = 'disabled'
            cur_btn['text'] = 'üö©'
            cur_btn['disabledforeground'] = 'red'
            self.flags += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–ª–∞–∂–∫–æ–≤ —É —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MineSweeper
            self.flags_count_label.config(text=str(self.flags))  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–ª–∞–∂–∫–æ–≤
        elif cur_btn['text'] == 'üö©':
            cur_btn['text'] = ''
            cur_btn['state'] = 'normal'
            self.flags -= 1  # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–ª–∞–∂–∫–æ–≤ —É —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MineSweeper
            self.flags_count_label.config(text=str(self.flags))  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–ª–∞–∂–∫–æ–≤

    def check_win(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã.
        safe_cells_count = (MineSweeper.row * MineSweeper.columns) - MineSweeper.mines
        opened_safe_cells = sum(1 for i in range(1, MineSweeper.row + 1) for j in range(1, MineSweeper.columns + 1) if
                                self.buttons[i][j].is_open and not self.buttons[i][j].is_mine)
        if safe_cells_count == opened_safe_cells:
            showinfo('–ü–û–ë–ï–î–ê!', '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!')
            MineSweeper.is_game_over = True

    def change_settings(self, row_entry, column_entry, mines_entry):
        # –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã.
        try:
            new_row = int(row_entry.get())
            new_column = int(column_entry.get())
            new_mines = int(mines_entry.get())

            if new_row < 1 or new_column < 1 or new_mines < 1:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")

            if new_mines >= new_row * new_column:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫")

            MineSweeper.row = new_row
            MineSweeper.columns = new_column
            MineSweeper.mines = new_mines

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.reload()
        except ValueError as e:
            showerror("–û—à–∏–±–∫–∞", str(e))
    def click(self, clicked_bt: MyButton):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É.
        if MineSweeper.is_game_over:
            return None

        if MineSweeper.is_first_click:
            self.insert_mines(clicked_bt.number)
            self.cnt_mines_in()
            self.print_bt()
            MineSweeper.is_first_click = False

        if clicked_bt.is_mine:
            clicked_bt.config(text='üí•', disabledforeground='black', background='red')
            clicked_bt.is_open = True
            MineSweeper.is_game_over = True
            showinfo('GAME OVER', '–û–π, –∫–∞–∂–µ—Ç—Å—è –≤—ã –ø—Ä–æ–≥—Ä–∞–ª–∏!')
            for i in range(1, MineSweeper.row + 1):
                for j in range(1, MineSweeper.columns + 1):
                    btn = self.buttons[i][j]
                    if btn.is_mine:
                        btn['text'] = 'üí•'
        else:
            color = colors.get(clicked_bt.cnt_bomb, "black")
            if clicked_bt.cnt_bomb:
                clicked_bt.config(text=clicked_bt.cnt_bomb, disabledforeground=color)
                clicked_bt.is_open = True
            else:
                self.breadth_search(clicked_bt)

        clicked_bt.config(state='disabled')  # —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∏–º–∞–ª–∞—Å—å –æ–¥–∏–Ω —Ä–∞–∑
        clicked_bt.config(relief=tk.SUNKEN)

        if not MineSweeper.is_game_over:
            self.check_win()

    def breadth_search(self, btn: MyButton):
        # —á—Ç–æ–±—ã –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏—Å—å —Å—Ä–∞–∑—É
        queue = [btn]  # –æ—á–µ—Ä–µ–¥—å –∏–∑ –∫–Ω–æ–ø–æ–∫
        while queue:
            cur_btn = queue.pop()
            color = colors.get(cur_btn.cnt_bomb, "black")
            if cur_btn.cnt_bomb:
                cur_btn.config(text=cur_btn.cnt_bomb, disabledforeground=color)
            else:
                cur_btn.config(text='', disabledforeground='black')
            cur_btn.is_open = True
            cur_btn.config(state='disabled')  # —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∏–º–∞–ª–∞—Å—å –æ–¥–∏–Ω —Ä–∞–∑
            cur_btn.config(relief=tk.SUNKEN)

            if cur_btn.cnt_bomb == 0:
                x, y = cur_btn.x, cur_btn.y
                for dx in [-1, 0, 1]:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ç—ã—Ä–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–∞
                    for dy in [-1, 0, 1]:
                        if not abs(dx - dy) == 1:
                            continue

                        next_btn = self.buttons[x + dx][y + dy]
                        if not next_btn.is_open and 1 <= next_btn.x <= MineSweeper.row and \
                                1 <= next_btn.y <= MineSweeper.columns and next_btn not in queue:
                            queue.append(next_btn)
                self.check_win()

    def reload(self):
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã.
        [child.destroy() for child in self.window.winfo_children()]
        self.__init__()
        self.creat_wdg()
        MineSweeper.is_first_click = True
        MineSweeper.is_game_over = False
        MineSweeper.flags = 0  # –û–±–Ω—É–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–∂–∫–æ–≤
        self.flags_count_label.config(text=str(MineSweeper.flags))  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–ª–∞–∂–∫–æ–≤
        self.mines_count_label.config(text=str(MineSweeper.mines))  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω

    def create_settings(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        win_settings = tk.Toplevel(self.window)
        win_settings.wm_title('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        tk.Label(win_settings, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫').grid()
        row_entry = tk.Entry(win_settings)
        row_entry.insert(0, MineSweeper.row)
        row_entry.grid(row=0, column=1, padx=20, pady=20)
        tk.Label(win_settings, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤').grid()
        column_entry = tk.Entry(win_settings)
        column_entry.insert(0, MineSweeper.columns)
        column_entry.grid(row=1, column=1, padx=20, pady=20)
        tk.Label(win_settings, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω').grid()
        mines_entry = tk.Entry(win_settings)
        mines_entry.insert(0, MineSweeper.mines)
        mines_entry.grid(row=2, column=1, padx=20, pady=20)
        save_btn = tk.Button(win_settings, text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å',
                             command=lambda: self.change_settings(row_entry, column_entry, mines_entry))
        save_btn.grid(row=3, column=0, columnspan=2, padx=20,)

    def creat_wdg(self):
        # –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        menubar = tk.Menu(self.window)
        self.window.config(menu=menubar)
        settings_menu = tk.Menu(menubar, tearoff=0)
        settings_menu.add_command(label='–ò–≥—Ä–∞—Ç—å', command=self.reload)
        settings_menu.add_command(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', command=self.create_settings)
        settings_menu.add_command(label='–í—ã—Ö–æ–¥', command=self.window.destroy)
        menubar.add_cascade(label='–§–∞–π–ª', menu=settings_menu)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        count = 1
        for i in range(1, MineSweeper.row + 1):
            for j in range(1, MineSweeper.columns + 1):
                btn = self.buttons[i][j]
                btn.number = count
                btn.grid(row=i, column=j, stick='NWES')
                count += 1

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        for i in range(1, MineSweeper.row + 1):
            tk.Grid.rowconfigure(self.window, i, weight=1)
        for i in range(1, MineSweeper.columns + 1):
            tk.Grid.columnconfigure(self.window, i, weight=1)

    def open_all_bt(self):
        # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è, –æ—Ç–æ–±—Ä–∞–∂–∞—è –±–æ–º–±—ã –∏ —Ü–∏—Ñ—Ä—ã.
        for i in range(MineSweeper.row + 2):
            for j in range(MineSweeper.columns + 2):
                btn = self.buttons[i][j]
                if btn.is_mine:
                    btn.config(text='üí•', disabledforeground='black', background='red')
                elif btn.cnt_bomb in colors:
                    color = colors.get(btn.cnt_bomb, "black")
                    btn.config(text=btn.cnt_bomb, fg=color)

    def start(self):
        # –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É, —Å–æ–∑–¥–∞–≤–∞—è –≤–∏–¥–∂–µ—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        self.creat_wdg()
        MineSweeper.window.mainloop()

    def print_bt(self):
        # –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å.
        for i in range(1, MineSweeper.row + 1):
            for j in range(1, MineSweeper.columns + 1):
                btn = self.buttons[i][j]
                if btn.is_mine:
                    print('B', end=' ')
                else:
                    print(btn.cnt_bomb, end=' ')
            print()

    def insert_mines(self, number: int):
        # –†–∞–∑–º–µ—â–∞–µ—Ç –º–∏–Ω—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ, –∏—Å–∫–ª—é—á–∞—è –∫–ª–µ—Ç–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.
        index_mines = self.get_mines_pl(number)
        for i in range(1, MineSweeper.row + 1):
            for j in range(1, MineSweeper.columns + 1):
                btn = self.buttons[i][j]
                if btn.number in index_mines:
                    btn.is_mine = True

    def cnt_mines_in(self):
        # –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –∞—Ç—Ä–∏–±—É—Ç–µ –∫–Ω–æ–ø–∫–∏.
        for i in range(1, MineSweeper.row + 1):
            for j in range(1, MineSweeper.columns + 1):
                btn = self.buttons[i][j]
                cnt_bomb = 0
                if not btn.is_mine:
                    for row_dx in [-1, 0, 1]:
                        for col_dx in [-1, 0, 1]:
                            neighbour = self.buttons[i + row_dx][j + col_dx]
                            if neighbour.is_mine:
                                cnt_bomb += 1
                btn.cnt_bomb = cnt_bomb

    @staticmethod
    def get_mines_pl(exclude_number: int):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–ª–µ—Ç–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–µ–Ω—ã –º–∏–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏.
        indexes = list(range(1, MineSweeper.columns * MineSweeper.row + 1))
        indexes.remove(exclude_number)
        shuffle(indexes)
        return indexes[:MineSweeper.mines]

game = MineSweeper()
game.start()
